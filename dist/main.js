(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>a});var o=t(537),r=t.n(o),d=t(645),i=t.n(d)()(r());i.push([n.id,"/*\n  CSS reset\n*/\n/*\n  1. Use a more-intuitive box-sizing model.\n*/\n*, *::before, *::after {\n  box-sizing: border-box;\n}\n/*\n  2. Remove default margin\n*/\n* {\n  margin: 0;\n}\n/*\n  3. Allow percentage-based heights in the application\n*/\nhtml, body {\n  height: 100%;\n}\n/*\n  Typographic tweaks!\n  4. Add accessible line-height\n  5. Improve text rendering\n*/\nbody {\n  line-height: 1.5;\n  -webkit-font-smoothing: antialiased;\n}\n/*\n  6. Improve media defaults\n*/\nimg, picture, video, canvas, svg {\n  display: block;\n  max-width: 100%;\n}\n/*\n  7. Remove built-in form typography styles\n*/\ninput, button, textarea, select {\n  font: inherit;\n}\n/*\n  8. Avoid text overflows\n*/\np, h1, h2, h3, h4, h5, h6 {\n  overflow-wrap: break-word;\n}\n/*\n  9. Create a root stacking context\n*/\n#root, #__next {\n  isolation: isolate;\n}\n/*\n  10. Remove all styles from button\n*/\nbutton {\n  background: none;\n\tcolor: inherit;\n\tborder: none;\n\tpadding: 0;\n\tfont: inherit;\n\tcursor: pointer;\n\toutline: inherit;\n}\n\n/* \n  Todo list app style\n*/\n.material-symbols-outlined {\n  font-variation-settings:\n  'FILL' 0,\n  'wght' 400,\n  'GRAD' 0,\n  'opsz' 48\n}\n\nbody {\n  display: grid;\n  grid-template-rows: 1fr 11fr;\n\n  color: white;\n}\n\n#header {\n  background-color: rgba(40, 42, 58, 1);\n  font-size: 36px;\n\n  display: flex;\n  align-items: center;\n\n  padding: 12px;\n}\n\n#header .material-symbols-outlined {\n  font-size: 34px;\n}\n\n#container {\n  display: grid;\n  grid-template-columns: 1fr 4fr;\n\n  background-color: rgba(0,0,0, 0.5);\n}\n\n#left-col {\n  background-color: rgba(89, 89, 89, 0.5);\n\n  display: grid;\n  grid-template-rows: 1fr 9fr;\n  row-gap: 12px;\n\n  padding: 5% 10%;\n\n  font-size: 20px;\n}\n\n#left-col .material-symbols-outlined {\n  vertical-align: middle;\n  font-size: 24px;\n  position: relative;\n  top: -2px;\n  left: 0px;\n}\n\n#left-col button {\n  width: 220px;\n  padding: 4px 4px;\n  text-align: left;\n}\n\n#left-col button:hover {\n  background: grey;\n}\n\n#time-view-todo {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n}\n\n.collapsible-project-list ul {\n  list-style-type: none;\n  padding-left: 28px;\n}\n\n\n#left-col .collapsible-project-list li button {\n  width: 190px;\n  text-align: left;\n}\n\n#newProjectName {\n  height: 46px;\n  width: 180px;\n\n  padding: 10px;\n  margin: 10px 0;\n  border-radius: 10px;\n}\n\n#newProjectName:focus {\n  outline: 0;\n  box-shadow: rgba(40, 42, 58, 0.2) 0px 7px 29px 0px;\n}\n\n#left-col #add-project-btn-div {\n  width: 180px;\n\n  display: flex;\n  justify-content: space-around;\n}\n\n#left-col .add-project-field{\n  width: 80px;\n  border-radius: 10px;\n  background-color: #282A3A;\n\n  text-align: center;\n}\n\n#add-project-btn-div button:hover {\n  background: rgba(62, 63, 78, 1);\n}\n\n#project-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#project-header {\n  font-size: 20px;\n  \n  padding: 8px 16px;\n}\n\n#project-header button {\n  width: 100px;\n  border-radius: 10px;\n  background-color: #282A3A;\n\n  padding: 2px 4px;\n\n  text-align: center; \n}\n\n#project-todo {\n  font-size: 18px;\n  margin: 0 25% 0 16px;  \n}\n\n.todo-container {\n  margin: 16px 0px;\n\n  border-bottom: 1px solid white;\n  padding-bottom: 8px;\n}\n\n.todo-top-row {\n  display: grid;\n  grid-template-columns: 1fr 4fr 4fr 1fr 1fr;\n  align-items: center;\n}\n\n.todo-top-row .done-btn {\n  background-color: transparent;\n  border-style: solid;\n  border-radius: 50%;\n  border-width: 2px;\n  height: 20px;\n  width: 20px;\n}\n\n.todo-top-row .green {\n  border-color: rgb(24, 230, 24);\n}\n\n.todo-top-row .yellow {\n  border-color: rgb(239, 239, 70);\n}\n\n.todo-top-row .red {\n  border-color: rgb(232, 48, 48);\n}\n\n#add-todo-form {\n  margin: 0 25% 0 16px;\n\n  height: 60px;\n  display: grid;\n  grid-template-columns: 2fr 2fr 1fr 2fr 1fr 1fr;\n  column-gap: 8px;\n\n  align-items: center;\n}\n\n#add-todo-form * {\n  height: 50px;\n\n  border-radius: 10px;\n}\n\n#title {\n  width: 180px;\n}\n\n#add-todo-notes-field::placeholder {\n  vertical-align: middle;\n}\n\n#add-todo-form button,\n#add-todo-form input[type=submit] {\n  background-color: #282A3A;\n  color: white;\n\n  border: none;\n  padding: 2px 4px;\n  text-align: center; \n}\n\n#add-todo-form button:hover,\n#add-todo-form input:hover[type=submit]{\n  background: rgba(62, 63, 78, 1);\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;;CAEC;AACD;;CAEC;AACD;EACE,sBAAsB;AACxB;AACA;;CAEC;AACD;EACE,SAAS;AACX;AACA;;CAEC;AACD;EACE,YAAY;AACd;AACA;;;;CAIC;AACD;EACE,gBAAgB;EAChB,mCAAmC;AACrC;AACA;;CAEC;AACD;EACE,cAAc;EACd,eAAe;AACjB;AACA;;CAEC;AACD;EACE,aAAa;AACf;AACA;;CAEC;AACD;EACE,yBAAyB;AAC3B;AACA;;CAEC;AACD;EACE,kBAAkB;AACpB;AACA;;CAEC;AACD;EACE,gBAAgB;CACjB,cAAc;CACd,YAAY;CACZ,UAAU;CACV,aAAa;CACb,eAAe;CACf,gBAAgB;AACjB;;AAEA;;CAEC;AACD;EACE;;;;;AAKF;;AAEA;EACE,aAAa;EACb,4BAA4B;;EAE5B,YAAY;AACd;;AAEA;EACE,qCAAqC;EACrC,eAAe;;EAEf,aAAa;EACb,mBAAmB;;EAEnB,aAAa;AACf;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,8BAA8B;;EAE9B,kCAAkC;AACpC;;AAEA;EACE,uCAAuC;;EAEvC,aAAa;EACb,2BAA2B;EAC3B,aAAa;;EAEb,eAAe;;EAEf,eAAe;AACjB;;AAEA;EACE,sBAAsB;EACtB,eAAe;EACf,kBAAkB;EAClB,SAAS;EACT,SAAS;AACX;;AAEA;EACE,YAAY;EACZ,gBAAgB;EAChB,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,uBAAuB;AACzB;;AAEA;EACE,qBAAqB;EACrB,kBAAkB;AACpB;;;AAGA;EACE,YAAY;EACZ,gBAAgB;AAClB;;AAEA;EACE,YAAY;EACZ,YAAY;;EAEZ,aAAa;EACb,cAAc;EACd,mBAAmB;AACrB;;AAEA;EACE,UAAU;EACV,kDAAkD;AACpD;;AAEA;EACE,YAAY;;EAEZ,aAAa;EACb,6BAA6B;AAC/B;;AAEA;EACE,WAAW;EACX,mBAAmB;EACnB,yBAAyB;;EAEzB,kBAAkB;AACpB;;AAEA;EACE,+BAA+B;AACjC;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;AACrB;;AAEA;EACE,eAAe;;EAEf,iBAAiB;AACnB;;AAEA;EACE,YAAY;EACZ,mBAAmB;EACnB,yBAAyB;;EAEzB,gBAAgB;;EAEhB,kBAAkB;AACpB;;AAEA;EACE,eAAe;EACf,oBAAoB;AACtB;;AAEA;EACE,gBAAgB;;EAEhB,8BAA8B;EAC9B,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,0CAA0C;EAC1C,mBAAmB;AACrB;;AAEA;EACE,6BAA6B;EAC7B,mBAAmB;EACnB,kBAAkB;EAClB,iBAAiB;EACjB,YAAY;EACZ,WAAW;AACb;;AAEA;EACE,8BAA8B;AAChC;;AAEA;EACE,+BAA+B;AACjC;;AAEA;EACE,8BAA8B;AAChC;;AAEA;EACE,oBAAoB;;EAEpB,YAAY;EACZ,aAAa;EACb,8CAA8C;EAC9C,eAAe;;EAEf,mBAAmB;AACrB;;AAEA;EACE,YAAY;;EAEZ,mBAAmB;AACrB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,sBAAsB;AACxB;;AAEA;;EAEE,yBAAyB;EACzB,YAAY;;EAEZ,YAAY;EACZ,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;;EAEE,+BAA+B;AACjC",sourcesContent:["/*\n  CSS reset\n*/\n/*\n  1. Use a more-intuitive box-sizing model.\n*/\n*, *::before, *::after {\n  box-sizing: border-box;\n}\n/*\n  2. Remove default margin\n*/\n* {\n  margin: 0;\n}\n/*\n  3. Allow percentage-based heights in the application\n*/\nhtml, body {\n  height: 100%;\n}\n/*\n  Typographic tweaks!\n  4. Add accessible line-height\n  5. Improve text rendering\n*/\nbody {\n  line-height: 1.5;\n  -webkit-font-smoothing: antialiased;\n}\n/*\n  6. Improve media defaults\n*/\nimg, picture, video, canvas, svg {\n  display: block;\n  max-width: 100%;\n}\n/*\n  7. Remove built-in form typography styles\n*/\ninput, button, textarea, select {\n  font: inherit;\n}\n/*\n  8. Avoid text overflows\n*/\np, h1, h2, h3, h4, h5, h6 {\n  overflow-wrap: break-word;\n}\n/*\n  9. Create a root stacking context\n*/\n#root, #__next {\n  isolation: isolate;\n}\n/*\n  10. Remove all styles from button\n*/\nbutton {\n  background: none;\n\tcolor: inherit;\n\tborder: none;\n\tpadding: 0;\n\tfont: inherit;\n\tcursor: pointer;\n\toutline: inherit;\n}\n\n/* \n  Todo list app style\n*/\n.material-symbols-outlined {\n  font-variation-settings:\n  'FILL' 0,\n  'wght' 400,\n  'GRAD' 0,\n  'opsz' 48\n}\n\nbody {\n  display: grid;\n  grid-template-rows: 1fr 11fr;\n\n  color: white;\n}\n\n#header {\n  background-color: rgba(40, 42, 58, 1);\n  font-size: 36px;\n\n  display: flex;\n  align-items: center;\n\n  padding: 12px;\n}\n\n#header .material-symbols-outlined {\n  font-size: 34px;\n}\n\n#container {\n  display: grid;\n  grid-template-columns: 1fr 4fr;\n\n  background-color: rgba(0,0,0, 0.5);\n}\n\n#left-col {\n  background-color: rgba(89, 89, 89, 0.5);\n\n  display: grid;\n  grid-template-rows: 1fr 9fr;\n  row-gap: 12px;\n\n  padding: 5% 10%;\n\n  font-size: 20px;\n}\n\n#left-col .material-symbols-outlined {\n  vertical-align: middle;\n  font-size: 24px;\n  position: relative;\n  top: -2px;\n  left: 0px;\n}\n\n#left-col button {\n  width: 220px;\n  padding: 4px 4px;\n  text-align: left;\n}\n\n#left-col button:hover {\n  background: grey;\n}\n\n#time-view-todo {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n}\n\n.collapsible-project-list ul {\n  list-style-type: none;\n  padding-left: 28px;\n}\n\n\n#left-col .collapsible-project-list li button {\n  width: 190px;\n  text-align: left;\n}\n\n#newProjectName {\n  height: 46px;\n  width: 180px;\n\n  padding: 10px;\n  margin: 10px 0;\n  border-radius: 10px;\n}\n\n#newProjectName:focus {\n  outline: 0;\n  box-shadow: rgba(40, 42, 58, 0.2) 0px 7px 29px 0px;\n}\n\n#left-col #add-project-btn-div {\n  width: 180px;\n\n  display: flex;\n  justify-content: space-around;\n}\n\n#left-col .add-project-field{\n  width: 80px;\n  border-radius: 10px;\n  background-color: #282A3A;\n\n  text-align: center;\n}\n\n#add-project-btn-div button:hover {\n  background: rgba(62, 63, 78, 1);\n}\n\n#project-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#project-header {\n  font-size: 20px;\n  \n  padding: 8px 16px;\n}\n\n#project-header button {\n  width: 100px;\n  border-radius: 10px;\n  background-color: #282A3A;\n\n  padding: 2px 4px;\n\n  text-align: center; \n}\n\n#project-todo {\n  font-size: 18px;\n  margin: 0 25% 0 16px;  \n}\n\n.todo-container {\n  margin: 16px 0px;\n\n  border-bottom: 1px solid white;\n  padding-bottom: 8px;\n}\n\n.todo-top-row {\n  display: grid;\n  grid-template-columns: 1fr 4fr 4fr 1fr 1fr;\n  align-items: center;\n}\n\n.todo-top-row .done-btn {\n  background-color: transparent;\n  border-style: solid;\n  border-radius: 50%;\n  border-width: 2px;\n  height: 20px;\n  width: 20px;\n}\n\n.todo-top-row .green {\n  border-color: rgb(24, 230, 24);\n}\n\n.todo-top-row .yellow {\n  border-color: rgb(239, 239, 70);\n}\n\n.todo-top-row .red {\n  border-color: rgb(232, 48, 48);\n}\n\n#add-todo-form {\n  margin: 0 25% 0 16px;\n\n  height: 60px;\n  display: grid;\n  grid-template-columns: 2fr 2fr 1fr 2fr 1fr 1fr;\n  column-gap: 8px;\n\n  align-items: center;\n}\n\n#add-todo-form * {\n  height: 50px;\n\n  border-radius: 10px;\n}\n\n#title {\n  width: 180px;\n}\n\n#add-todo-notes-field::placeholder {\n  vertical-align: middle;\n}\n\n#add-todo-form button,\n#add-todo-form input[type=submit] {\n  background-color: #282A3A;\n  color: white;\n\n  border: none;\n  padding: 2px 4px;\n  text-align: center; \n}\n\n#add-todo-form button:hover,\n#add-todo-form input:hover[type=submit]{\n  background: rgba(62, 63, 78, 1);\n}"],sourceRoot:""}]);const a=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,d){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(i[l]=!0)}for(var A=0;A<n.length;A++){var c=[].concat(n[A]);o&&i[c[0]]||(void 0!==d&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=d),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),e.push(c))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),d="/*# ".concat(r," */");return[e].concat([d]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var d={},i=[],a=0;a<n.length;a++){var l=n[a],A=o.base?l[0]+o.base:l[0],c=d[A]||0,s="".concat(A," ").concat(c);d[A]=c+1;var p=t(s),m={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)e[p].references++,e[p].updater(m);else{var u=r(m,o);o.byIndex=a,e.splice(a,0,{identifier:s,updater:u,references:1})}i.push(s)}return i}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var d=o(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<d.length;i++){var a=t(d[i]);e[a].references--}for(var l=o(n,r),A=0;A<d.length;A++){var c=t(d[A]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}d=l}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var d=t.sourceMap;d&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(d))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var d=e[o]={id:o,exports:{}};return n[o](d,d.exports,t),d.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),o=t(795),r=t.n(o),d=t(569),i=t.n(d),a=t(565),l=t.n(a),A=t(216),c=t.n(A),s=t(589),p=t.n(s),m=t(426),u={};u.styleTagTransform=p(),u.setAttributes=l(),u.insert=i().bind(null,"head"),u.domAPI=r(),u.insertStyleElement=c(),e()(m.Z,u),m.Z&&m.Z.locals&&m.Z.locals;const E=(n,e=[])=>({name:n,todoList:e,numTodo:()=>e.length,addTodo:n=>{e.push(n)},deleteTodo:n=>{e.splice(n,1)}}),f=(n,e,t,o,r="",d=!1)=>({title:n,dueDate:e,priority:t,isDone:o,notes:r,showNotes:d});Storage.prototype.setObj=function(n,e){return this.setItem(n,JSON.stringify(e))},Storage.prototype.getObj=function(n){return JSON.parse(this.getItem(n))};let g=[],C=0;const b=()=>{(()=>{const n=[];for(const e of g)n.push(e.name);localStorage.setObj("projOrder",n)})(),(()=>{for(const n of g)localStorage.setObj(n.name,n.todoList)})()},h=()=>g,x=()=>C,B=n=>{C=n};function y(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function v(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function w(n){return w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},w(n)}function j(n){v(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"===w(n)&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function k(n,e){v(2,arguments);var t=j(n).getTime(),o=j(e.start).getTime(),r=j(e.end).getTime();if(!(o<=r))throw new RangeError("Invalid interval");return t>=o&&t<=r}const T=new Map([[1,"green"],[2,"yellow"],[3,"red"]]),L=n=>{document.getElementById("project-title").innerText=n},D=()=>{const n=document.getElementById("right-col");n.children.length>2&&n.removeChild(n.children[1])},S=()=>{document.getElementById("project-todo").innerHTML=""},I=(n,e,t,o=0)=>{const r=document.createElement("div");r.classList.add("todo-container");const d=document.createElement("div");d.classList.add("todo-top-row");const i=document.createElement("button");i.classList.add("done-btn"),i.classList.add(T.get(parseInt(n.priority))),i.index=o,i.addEventListener("click",(n=>{((n,e)=>{var t;(t=h()[n].todoList[e.srcElement.index]).isDone=!t.isDone,b(),N(n)})(x(),n)}));const a=document.createElement("div");a.innerText=n.title;const l=document.createElement("div");if(l.innerText=n.dueDate,d.appendChild(i),d.appendChild(a),d.appendChild(l),e){const e=document.createElement("button");n.showNotes?e.innerText="🔼":e.innerText="🔽",e.index=o,e.classList.add("todo-drop-down-btn"),e.addEventListener("click",(n=>{((n,e)=>{var t;(t=h()[n].todoList[e.srcElement.index]).showNotes=!t.showNotes,N(n)})(x(),n)})),d.appendChild(e)}if(t){const n=document.createElement("button");n.innerText="❌",n.index=o,n.classList.add("todo-del-btn"),n.addEventListener("click",(n=>{var e,t;n.preventDefault(),e=x(),t=n.srcElement.index,h()[e].deleteTodo(t),N(),b()})),d.appendChild(n)}if(r.appendChild(d),n.showNotes){const e=document.createElement("div");e.innerText=n.notes,e.classList.add("todo-bottom-row"),r.appendChild(e)}return r},N=n=>{S(),((n=0)=>{const e=document.getElementById("project-todo"),t=h()[n].todoList;for(let n in t){const o=t[n];if(!o.isDone){const t=I(o,!0,!0,n);e.appendChild(t)}}})(n)},Y=()=>{const n=document.getElementById("project-title"),e=h();n.innerText=e[x()].name},O=()=>{const n=document.getElementById("project-list");return void 0!==n&&null!=n},z=()=>{O()?M():_()},M=()=>{document.getElementsByClassName("collapsible-project-list")[0].innerHTML=""},_=()=>{M(),(()=>{const n=document.createElement("ul");n.id="project-list";const e=h();let t=0;e.forEach((e=>{const o=document.createElement("li");o.classList.add("project-li");const r=document.createElement("button");r.innerText=e.name,r.index=t,r.addEventListener("click",(n=>{const e=n.target.index;B(e),Y(),N(e)})),o.appendChild(r),n.appendChild(o),t++})),document.getElementsByClassName("collapsible-project-list")[0].appendChild(n)})()},R=()=>{const n=document.getElementById("projects");n.children.length>3&&n.removeChild(n.lastChild)};(()=>{const n=document.body,e=document.createElement("div");e.id="header",e.innerHTML='<span class="material-symbols-outlined">done_all</span> Todo',n.appendChild(e);const t=document.createElement("div");t.id="container";const o=document.createElement("div");o.id="left-col";const r=document.createElement("div");r.id="time-view-todo";const d=document.createElement("button");d.innerHTML='<span class="material-symbols-outlined">today</span> Today',d.id="today-todo-btn";const i=document.createElement("button");i.innerHTML='<span class="material-symbols-outlined">calendar_view_week</span> This week',i.id="week-todo-btn",r.appendChild(d),r.appendChild(i);const a=document.createElement("div");a.id="projects";const l=document.createElement("button");l.id="expand-projects-btn",l.innerHTML='<span class="material-symbols-outlined">expand_more</span> Projects';const A=document.createElement("div");A.classList.add("collapsible-project-list");const c=document.createElement("button");c.id="add-project-btn",c.innerHTML='<span class="material-symbols-outlined">add</span> Add project',a.appendChild(l),a.appendChild(A),a.appendChild(c),o.appendChild(r),o.appendChild(a);const s=document.createElement("div");s.id="right-col";const p=document.createElement("div");p.id="project-header";const m=document.createElement("h2");m.id="project-title",m.innerText="Default";const u=document.createElement("button");u.id="add-todo-btn",u.innerText="Add todo",p.appendChild(m),p.appendChild(u);const E=document.createElement("div");E.id="project-todo",E.innerText="Todos",s.appendChild(p),s.appendChild(E),t.appendChild(o),t.appendChild(s),n.appendChild(t)})(),function(n){let e;try{e=window.localStorage;const n="__storage_test__";return e.setItem(n,n),e.removeItem(n),!0}catch(n){return n instanceof DOMException&&(22===n.code||1014===n.code||"QuotaExceededError"===n.name||"NS_ERROR_DOM_QUOTA_REACHED"===n.name)&&e&&0!==e.length}}()&&0!==localStorage.length?(()=>{const n=localStorage.getObj("projOrder");for(const e of n){const n=[];for(let t of localStorage.getObj(e)){const e=f(t.title,t.dueDate,t.priority,t.isDone,t.notes,!1);n.push(e)}const t=E(e,n);g.push(t)}})():(()=>{const n=E("Default");g.push(n),b()})(),document.getElementById("today-todo-btn").addEventListener("click",(()=>{S(),(()=>{L("Today");const n=(new Date).toJSON().slice(0,10),e=document.getElementById("project-todo"),t=h();for(let o in t)for(let r in t[o].todoList){const d=t[o].todoList[r];if(d.dueDate===n){const n=I(d,!1,!1);e.appendChild(n)}}})()})),document.getElementById("week-todo-btn").addEventListener("click",(()=>{S(),(()=>{L("This week");const n=new Date,e=function(n,e){v(2,arguments);var t=j(n),o=y(e);return isNaN(o)?new Date(NaN):o?(t.setDate(t.getDate()+o),t):t}(n,6),t=document.getElementById("project-todo"),o=h();for(let r in o)for(let d in o[r].todoList){const i=o[r].todoList[d];if(k(new Date(i.dueDate),{start:n,end:e})){const n=I(i,!1,!1);t.appendChild(n)}}})()})),document.getElementById("expand-projects-btn").addEventListener("click",z),document.getElementById("add-project-btn").addEventListener("click",(()=>{R(),(()=>{const n=document.createElement("input");n.type="text",n.placeholder="Input project name",n.name="newProjectName",n.pattern="^(?!s*$).+",n.id="newProjectName";const e=document.createElement("button");e.innerText="Add",e.type="submit",e.classList.add("add-project-field");const t=document.createElement("button");t.innerText="Close",t.classList.add("add-project-field"),t.addEventListener("click",R);const o=document.createElement("div");o.id="add-project-btn-div",o.appendChild(e),o.appendChild(t);const r=document.createElement("form");r.appendChild(n),r.appendChild(o),r.addEventListener("submit",(n=>{if(n.preventDefault(),(n=>{for(let e of g)if(e.name===n)return!1;const e=E(n);return g.push(e),B(g.length-1),!0})(r.elements.newProjectName.value))O&&_(),r.reset(),R(),Y(),B(h().length-1),N(h().length-1),b();else{const n=document.createElement("div");n.id="err-msg",n.innerText="Project name already exists!",r.appendChild(n)}})),document.getElementById("projects").appendChild(r)})()})),document.getElementById("add-todo-btn").addEventListener("click",(()=>{D(),(()=>{const n=document.createElement("input");n.setAttribute("type","text"),n.setAttribute("placeholder","Todo title"),n.setAttribute("name","title"),n.setAttribute("pattern","^(?!s*$).+"),n.id="title";const e=document.createElement("input");e.name="dueDate",e.setAttribute("type","date");const t=(new Date).toJSON().slice(0,10);e.setAttribute("value",t),e.id="dueDate";const o=document.createElement("select");o.name="priority",o.id="priority";const r=document.createElement("option");r.value="1",r.text="P1 🟩",o.appendChild(r);const d=document.createElement("option");d.value="2",d.text="P2 🟨",o.appendChild(d);const i=document.createElement("option");i.value="3",i.text="P3 🟥",o.appendChild(i);const a=document.createElement("textarea");a.name="notes",a.maxLength="1000",a.id="add-todo-notes-field",a.placeholder="Notes here (optional)";const l=document.createElement("input");l.type="submit",l.value="Add",l.classList.add("add-todo-form-btn");const A=document.createElement("button");A.innerText="Close form",A.addEventListener("click",D),A.classList.add("add-todo-form-btn");const c=document.createElement("form");c.id="add-todo-form",c.appendChild(n),c.appendChild(e),c.appendChild(o),c.appendChild(a),c.appendChild(l),c.appendChild(A),c.addEventListener("submit",(n=>{n.preventDefault(),((n,e,t,o,r)=>{const d=f(n,e,t,!1,r);g[x()].addTodo(d)})(c.elements.title.value,c.elements.dueDate.value,c.elements.priority.value,0,c.elements.notes.value),c.reset(),S(),N(x()),b()}));const s=document.getElementById("right-col");s.insertBefore(c,s.childNodes[1])})()})),N()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,